"use strict";
var ModbusRTU = require("modbus-serial");
var pathExists = require("path-exists");
var merge = require("json-add");
var Promise = require("bluebird");
var lsusbdev = require("lsusbdev");
var client = new ModbusRTU();
var defaults = {
    baud: 9600,
    dev: "/dev/ttyUSB0",
    address: 1
};
if (pathExists.sync("./conf.json")) {
    merge(defaults, require("./conf.json"));
    if (defaults.hub) {
        lsusbdev().then(function (devis) {
            for (var i = 0; i < devis.length; i++) {
                if (devis[i].hub === defaults.hub) {
                    defaults.dev = devis[i].dev;
                }
            }
            start();
        }).catch(function () {
            throw "NO USB FOR SDM";
        });
    }
}
else {
    start();
}
function readReg(reg) {
    return new Promise(function (resolve, reject) {
        client.readInputRegisters(reg, 2).then(function (data) {
            resolve(data.buffer.readFloatBE());
        }).catch(function (err) {
            reject(err);
        });
    });
}
function start() {
    setTimeout(function () {
        client.connectRTU(defaults.dev, { baudrate: defaults.baud });
        client.setID(defaults.address);
        readReg(0).then(function (voltage) {
            console.log(voltage);
        });
    }, 1000);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekMsSUFBWSxVQUFVLFdBQU0sYUFBYSxDQUFDLENBQUE7QUFDMUMsSUFBTyxLQUFLLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFDbkMsSUFBWSxPQUFPLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFFcEMsSUFBTyxRQUFRLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFHdEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQVM3QixJQUFJLFFBQVEsR0FBYztJQUN0QixJQUFJLEVBQUUsSUFBSTtJQUNWLEdBQUcsRUFBRSxjQUFjO0lBQ25CLE9BQU8sRUFBRSxDQUFDO0NBQ2IsQ0FBQztBQUVGLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWpDLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFFeEMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDZixRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBUyxLQUFLO1lBRTFCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNwQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNoQyxRQUFRLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQ2hDLENBQUM7WUFDTCxDQUFDO1lBQ0QsS0FBSyxFQUFFLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDTCxNQUFNLGdCQUFnQixDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztBQUVMLENBQUM7QUFBQyxJQUFJLENBQUMsQ0FBQztJQUNKLEtBQUssRUFBRSxDQUFDO0FBQ1osQ0FBQztBQUdELGlCQUFpQixHQUFXO0lBQ3hCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFTLE9BQU8sRUFBRSxNQUFNO1FBQ3ZDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsSUFBSTtZQUNoRCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFTLEdBQUc7WUFDakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDO0FBR0Q7SUFDSSxVQUFVLENBQUM7UUFFUCxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFHL0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLE9BQU87WUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUVQLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUdiLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgTW9kYnVzUlRVID0gcmVxdWlyZShcIm1vZGJ1cy1zZXJpYWxcIik7XG5pbXBvcnQgKiBhcyBwYXRoRXhpc3RzIGZyb20gXCJwYXRoLWV4aXN0c1wiO1xuaW1wb3J0IG1lcmdlID0gcmVxdWlyZShcImpzb24tYWRkXCIpO1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIjtcblxuaW1wb3J0IGxzdXNiZGV2ID0gcmVxdWlyZShcImxzdXNiZGV2XCIpO1xuXG5cbmxldCBjbGllbnQgPSBuZXcgTW9kYnVzUlRVKCk7XG5cbmludGVyZmFjZSBJZGVmYXVsdHMge1xuICAgIGJhdWQ/OiBudW1iZXI7XG4gICAgZGV2Pzogc3RyaW5nO1xuICAgIGFkZHJlc3M/OiBudW1iZXI7XG4gICAgaHViPzogc3RyaW5nO1xufVxuXG5sZXQgZGVmYXVsdHMgPSA8SWRlZmF1bHRzPntcbiAgICBiYXVkOiA5NjAwLFxuICAgIGRldjogXCIvZGV2L3R0eVVTQjBcIixcbiAgICBhZGRyZXNzOiAxXG59O1xuXG5pZiAocGF0aEV4aXN0cy5zeW5jKFwiLi9jb25mLmpzb25cIikpIHtcblxuICAgIG1lcmdlKGRlZmF1bHRzLCByZXF1aXJlKFwiLi9jb25mLmpzb25cIikpO1xuXG4gICAgaWYgKGRlZmF1bHRzLmh1Yikge1xuICAgICAgICBsc3VzYmRldigpLnRoZW4oZnVuY3Rpb24oZGV2aXMpIHtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXZpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChkZXZpc1tpXS5odWIgPT09IGRlZmF1bHRzLmh1Yikge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0cy5kZXYgPSBkZXZpc1tpXS5kZXY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnQoKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBcIk5PIFVTQiBGT1IgU0RNXCI7XG4gICAgICAgIH0pO1xuICAgIH1cblxufSBlbHNlIHtcbiAgICBzdGFydCgpO1xufVxuXG5cbmZ1bmN0aW9uIHJlYWRSZWcocmVnOiBudW1iZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGNsaWVudC5yZWFkSW5wdXRSZWdpc3RlcnMocmVnLCAyKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGF0YS5idWZmZXIucmVhZEZsb2F0QkUoKSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59XG5cblxuZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICBjbGllbnQuY29ubmVjdFJUVShkZWZhdWx0cy5kZXYsIHsgYmF1ZHJhdGU6IGRlZmF1bHRzLmJhdWQgfSk7XG4gICAgICAgIGNsaWVudC5zZXRJRChkZWZhdWx0cy5hZGRyZXNzKTtcblxuXG4gICAgICAgIHJlYWRSZWcoMCkudGhlbihmdW5jdGlvbih2b2x0YWdlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2b2x0YWdlKTtcbiAgICAgICAgfSk7XG5cbiAgICB9LCAxMDAwKTtcblxuXG59XG5cblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
