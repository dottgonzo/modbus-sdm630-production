"use strict";
var ModbusRTU = require("modbus-serial");
var merge = require("json-add");
var Promise = require("bluebird");
var lsusbdev = require("lsusbdev");
var defaults = {
    baud: 9600,
    dev: "/dev/ttyUSB0",
    address: 1
};
function readReg(client, reg) {
    console.log("reg", reg);
    return new Promise(function (resolve, reject) {
        console.log("prom");
        client.readInputRegisters(reg, 2).then(function (data) {
            console.log("regdata", data);
            resolve(data.buffer.readFloatBE());
        }).catch(function (err) {
            console.log("regerr", err);
            reject(err);
        });
    });
}
var SdM = (function () {
    function SdM(conf) {
        var that = this;
        if (conf) {
            merge(defaults, conf);
            if (defaults.hub) {
                lsusbdev().then(function (devis) {
                    for (var i = 0; i < devis.length; i++) {
                        if (devis[i].hub === defaults.hub) {
                            defaults.dev = devis[i].dev;
                        }
                    }
                    that.conf = defaults;
                }).catch(function () {
                    throw "NO USB FOR SDM";
                });
            }
        }
        else {
            that.conf = defaults;
        }
    }
    SdM.prototype.data = function () {
        var that = this;
        var client = new ModbusRTU();
        client.setID(that.conf.address);
        return new Promise(function (resolve, reject) {
            console.log(defaults);
            function start() {
                console.log("start");
                readReg(client, 0).then(function (d) {
                    console.log(d);
                }).catch(function (err) {
                    console.log(err);
                });
            }
            client.connectRTU(that.conf.dev, { baudrate: that.conf.baud }, start);
        });
    };
    return SdM;
}());
var regss = [
    {
        label: "volt",
        phase: 1,
        reg: 0
    },
    {
        label: "volt",
        phase: 2,
        reg: 2
    },
    {
        label: "volt",
        phase: 3,
        reg: 4
    },
    {
        label: "current",
        phase: 1,
        reg: 6
    },
    {
        label: "current",
        phase: 2,
        reg: 8
    },
    {
        label: "current",
        phase: 3,
        reg: 10
    },
    {
        label: "power",
        phase: 1,
        reg: 12
    },
    {
        label: "power",
        phase: 2,
        reg: 14
    },
    {
        label: "power",
        phase: 3,
        reg: 16
    },
    {
        label: "frequency",
        phase: 0,
        reg: 70
    },
    {
        label: "totalPower",
        phase: 0,
        reg: 52
    },
    {
        label: "allPower",
        phase: 0,
        reg: 74
    }
];
var regs = [
    {
        label: "volt",
        phase: 1,
        reg: 0
    }
];
module.exports = SdM;

//# sourceMappingURL=data:application/json;base64,
