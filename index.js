"use strict";
var ModbusRTU = require("modbus-serial");
var merge = require("json-add");
var lsusbdev = require("lsusbdev");
var defaults = {
    baud: 9600,
    dev: "/dev/ttyUSB0",
    address: 1
};
var SdM = (function () {
    function SdM(conf) {
        var that = this;
        if (conf) {
            merge(defaults, conf);
            if (defaults.hub) {
                lsusbdev().then(function (devis) {
                    for (var i = 0; i < devis.length; i++) {
                        if (devis[i].hub === defaults.hub) {
                            defaults.dev = devis[i].dev;
                        }
                    }
                    that.conf = defaults;
                }).catch(function () {
                    throw "NO USB FOR SDM";
                });
            }
        }
        else {
            that.conf = defaults;
        }
    }
    SdM.prototype.data = function () {
        var that = this;
        var client = new ModbusRTU();
        client.setID(that.conf.address);
        console.log(that.conf);
        function start() {
            console.log("start");
            client.readInputRegisters(0, 2).then(function (data) {
                console.log("regdata", data);
            }).catch(function (err) {
                console.log("regerr", err);
            });
        }
        client.connectRTU(that.conf.dev, { baudrate: that.conf.baud }, start);
    };
    return SdM;
}());
var regss = [
    {
        label: "volt",
        phase: 1,
        reg: 0
    },
    {
        label: "volt",
        phase: 2,
        reg: 2
    },
    {
        label: "volt",
        phase: 3,
        reg: 4
    },
    {
        label: "current",
        phase: 1,
        reg: 6
    },
    {
        label: "current",
        phase: 2,
        reg: 8
    },
    {
        label: "current",
        phase: 3,
        reg: 10
    },
    {
        label: "power",
        phase: 1,
        reg: 12
    },
    {
        label: "power",
        phase: 2,
        reg: 14
    },
    {
        label: "power",
        phase: 3,
        reg: 16
    },
    {
        label: "frequency",
        phase: 0,
        reg: 70
    },
    {
        label: "totalPower",
        phase: 0,
        reg: 52
    },
    {
        label: "allPower",
        phase: 0,
        reg: 74
    }
];
var regs = [
    {
        label: "volt",
        phase: 1,
        reg: 0
    }
];
module.exports = SdM;

//# sourceMappingURL=data:application/json;base64,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S0FBSyxFQUFFLE1BQU07UUFDYixLQUFLLEVBQUUsQ0FBQztRQUNSLEdBQUcsRUFBRSxDQUFDO0tBQ1Q7SUFDRDtRQUNJLEtBQUssRUFBRSxTQUFTO1FBQ2hCLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLENBQUM7S0FDVDtJQUNEO1FBQ0ksS0FBSyxFQUFFLFNBQVM7UUFDaEIsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsQ0FBQztLQUNUO0lBQ0Q7UUFDSSxLQUFLLEVBQUUsU0FBUztRQUNoQixLQUFLLEVBQUUsQ0FBQztRQUNSLEdBQUcsRUFBRSxFQUFFO0tBQ1Y7SUFDRDtRQUNJLEtBQUssRUFBRSxPQUFPO1FBQ2QsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsRUFBRTtLQUNWO0lBQ0Q7UUFDSSxLQUFLLEVBQUUsT0FBTztRQUNkLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLEVBQUU7S0FDVjtJQUNEO1FBQ0ksS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsQ0FBQztRQUNSLEdBQUcsRUFBRSxFQUFFO0tBQ1Y7SUFDRDtRQUNJLEtBQUssRUFBRSxXQUFXO1FBQ2xCLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLEVBQUU7S0FDVjtJQUNEO1FBQ0ksS0FBSyxFQUFFLFlBQVk7UUFDbkIsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsRUFBRTtLQUNWO0lBQ0Q7UUFDSSxLQUFLLEVBQUUsVUFBVTtRQUNqQixLQUFLLEVBQUUsQ0FBQztRQUNSLEdBQUcsRUFBRSxFQUFFO0tBQ1Y7Q0FDSixDQUFDO0FBRUYsSUFBSSxJQUFJLEdBQUc7SUFDUDtRQUNJLEtBQUssRUFBRSxNQUFNO1FBQ2IsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsQ0FBQztLQUNUO0NBQ0osQ0FBQztBQUtGLGlCQUFTLEdBQUcsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBNb2RidXNSVFUgPSByZXF1aXJlKFwibW9kYnVzLXNlcmlhbFwiKTtcbmltcG9ydCAqIGFzIHBhdGhFeGlzdHMgZnJvbSBcInBhdGgtZXhpc3RzXCI7XG5pbXBvcnQgbWVyZ2UgPSByZXF1aXJlKFwianNvbi1hZGRcIik7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuaW1wb3J0ICogYXMgYXN5bmMgZnJvbSBcImFzeW5jXCI7XG5cbmltcG9ydCBsc3VzYmRldiA9IHJlcXVpcmUoXCJsc3VzYmRldlwiKTtcblxuXG5cbmludGVyZmFjZSBJZGVmYXVsdHMge1xuICAgIGJhdWQ/OiBudW1iZXI7XG4gICAgZGV2Pzogc3RyaW5nO1xuICAgIGFkZHJlc3M/OiBudW1iZXI7XG4gICAgaHViPzogc3RyaW5nO1xufVxuXG5sZXQgZGVmYXVsdHMgPSA8SWRlZmF1bHRzPntcbiAgICBiYXVkOiA5NjAwLFxuICAgIGRldjogXCIvZGV2L3R0eVVTQjBcIixcbiAgICBhZGRyZXNzOiAxXG59O1xuXG5cblxuXG5cblxuXG5cbmNsYXNzIFNkTSB7XG5cbiAgICBjb25mOiBJZGVmYXVsdHM7XG4gICAgY29uc3RydWN0b3IoY29uZj86IElkZWZhdWx0cykge1xuXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgaWYgKGNvbmYpIHtcblxuICAgICAgICAgICAgbWVyZ2UoZGVmYXVsdHMsIGNvbmYpO1xuXG4gICAgICAgICAgICBpZiAoZGVmYXVsdHMuaHViKSB7XG4gICAgICAgICAgICAgICAgbHN1c2JkZXYoKS50aGVuKGZ1bmN0aW9uKGRldmlzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXZpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRldmlzW2ldLmh1YiA9PT0gZGVmYXVsdHMuaHViKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHMuZGV2ID0gZGV2aXNbaV0uZGV2O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY29uZiA9IGRlZmF1bHRzO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIk5PIFVTQiBGT1IgU0RNXCI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhhdC5jb25mID0gZGVmYXVsdHM7XG5cblxuICAgICAgICB9XG4gICAgfVxuICAgIGRhdGEoKSB7XG5cbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIGxldCBjbGllbnQgPSBuZXcgTW9kYnVzUlRVKCk7XG5cbiAgICAgICAgY2xpZW50LnNldElEKHRoYXQuY29uZi5hZGRyZXNzKTtcblxuXG5cblxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGF0LmNvbmYpO1xuXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuXG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXJ0XCIpO1xuICAgICAgICAgICAgICAgIGNsaWVudC5yZWFkSW5wdXRSZWdpc3RlcnMoMCwgMikudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVnZGF0YVwiLCBkYXRhKVxuXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVnZXJyXCIsIGVycilcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG5cblxuXG5cblxuICAgICAgICAgICAgY2xpZW50LmNvbm5lY3RSVFUodGhhdC5jb25mLmRldiwgeyBiYXVkcmF0ZTogdGhhdC5jb25mLmJhdWQgfSwgc3RhcnQpO1xuXG5cbiAgICB9XG59XG5cblxuXG5cblxuXG5sZXQgcmVnc3MgPSBbXG4gICAge1xuICAgICAgICBsYWJlbDogXCJ2b2x0XCIsXG4gICAgICAgIHBoYXNlOiAxLFxuICAgICAgICByZWc6IDBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6IFwidm9sdFwiLFxuICAgICAgICBwaGFzZTogMixcbiAgICAgICAgcmVnOiAyXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcInZvbHRcIixcbiAgICAgICAgcGhhc2U6IDMsXG4gICAgICAgIHJlZzogNFxuICAgIH0sXG4gICAge1xuICAgICAgICBsYWJlbDogXCJjdXJyZW50XCIsXG4gICAgICAgIHBoYXNlOiAxLFxuICAgICAgICByZWc6IDZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6IFwiY3VycmVudFwiLFxuICAgICAgICBwaGFzZTogMixcbiAgICAgICAgcmVnOiA4XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcImN1cnJlbnRcIixcbiAgICAgICAgcGhhc2U6IDMsXG4gICAgICAgIHJlZzogMTBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6IFwicG93ZXJcIixcbiAgICAgICAgcGhhc2U6IDEsXG4gICAgICAgIHJlZzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6IFwicG93ZXJcIixcbiAgICAgICAgcGhhc2U6IDIsXG4gICAgICAgIHJlZzogMTRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6IFwicG93ZXJcIixcbiAgICAgICAgcGhhc2U6IDMsXG4gICAgICAgIHJlZzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6IFwiZnJlcXVlbmN5XCIsXG4gICAgICAgIHBoYXNlOiAwLFxuICAgICAgICByZWc6IDcwXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcInRvdGFsUG93ZXJcIixcbiAgICAgICAgcGhhc2U6IDAsXG4gICAgICAgIHJlZzogNTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6IFwiYWxsUG93ZXJcIixcbiAgICAgICAgcGhhc2U6IDAsXG4gICAgICAgIHJlZzogNzRcbiAgICB9XG5dO1xuXG5sZXQgcmVncyA9IFtcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcInZvbHRcIixcbiAgICAgICAgcGhhc2U6IDEsXG4gICAgICAgIHJlZzogMFxuICAgIH1cbl07XG5cblxuXG5cbmV4cG9ydCA9IFNkTSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
