"use strict";
var ModbusRTU = require("modbus-serial");
var pathExists = require("path-exists");
var merge = require("json-add");
var Promise = require("bluebird");
var async = require("async");
var lsusbdev = require("lsusbdev");
var client = new ModbusRTU();
var defaults = {
    baud: 9600,
    dev: "/dev/ttyUSB0",
    address: 1
};
function data() {
    return new Promise(function (resolve, reject) {
        if (pathExists.sync("./conf.json")) {
            merge(defaults, require("./conf.json"));
            client.setID(defaults.address);
            if (defaults.hub) {
                lsusbdev().then(function (devis) {
                    for (var i = 0; i < devis.length; i++) {
                        if (devis[i].hub === defaults.hub) {
                            defaults.dev = devis[i].dev;
                        }
                    }
                    client.connectRTU(defaults.dev, { baudrate: defaults.baud }, start().then(function (data) {
                        resolve(data);
                    }).catch(function (err) {
                        reject(err);
                    }));
                }).catch(function () {
                    throw "NO USB FOR SDM";
                });
            }
        }
        else {
            client.connectRTU(defaults.dev, { baudrate: defaults.baud }, start().then(function (data) {
                resolve(data);
            }).catch(function (err) {
                reject(err);
            }));
        }
    });
}
function readReg(reg) {
    return new Promise(function (resolve, reject) {
        client.readInputRegisters(reg, 2).then(function (data) {
            resolve(data.buffer.readFloatBE());
        }).catch(function (err) {
            reject(err);
        });
    });
}
var regs = [
    {
        label: "volt",
        phase: 1,
        reg: 0
    },
    {
        label: "volt",
        phase: 2,
        reg: 2
    },
    {
        label: "volt",
        phase: 3,
        reg: 4
    },
    {
        label: "current",
        phase: 1,
        reg: 6
    },
    {
        label: "current",
        phase: 2,
        reg: 8
    },
    {
        label: "current",
        phase: 3,
        reg: 10
    },
    {
        label: "power",
        phase: 1,
        reg: 12
    },
    {
        label: "power",
        phase: 2,
        reg: 14
    },
    {
        label: "power",
        phase: 3,
        reg: 16
    },
    {
        label: "frequency",
        phase: 0,
        reg: 70
    },
    {
        label: "totalPower",
        phase: 0,
        reg: 52
    },
    {
        label: "allPower",
        phase: 0,
        reg: 74
    }
];
function start() {
    return new Promise(function (resolve, reject) {
        var answer = {};
        async.each(regs, function (iterator, cb) {
            readReg(iterator.reg).then(function (d) {
                answer[iterator.label + iterator.phase] = d;
                console.log(d);
                cb();
            }).catch(function () {
                cb();
            });
        }, function (err) {
            if (err) {
                reject(err);
            }
            else {
                resolve(answer);
            }
        });
    });
}
module.exports = data;

//# sourceMappingURL=data:application/json;base64,
