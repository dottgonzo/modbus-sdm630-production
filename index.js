"use strict";
var ModbusRTU = require("modbus-serial");
var merge = require("json-add");
var Promise = require("bluebird");
var async = require("async");
var lsusbdev = require("lsusbdev");
var defaults = {
    baud: 9600,
    dev: "/dev/ttyUSB0",
    address: 1
};
var SdM = (function () {
    function SdM(conf) {
        this.client = new ModbusRTU();
        var that = this;
        if (conf) {
            merge(defaults, require("./conf.json"));
            that.client.setID(defaults.address);
            if (defaults.hub) {
                lsusbdev().then(function (devis) {
                    for (var i = 0; i < devis.length; i++) {
                        if (devis[i].hub === defaults.hub) {
                            defaults.dev = devis[i].dev;
                        }
                    }
                    that.conf = defaults;
                }).catch(function () {
                    throw "NO USB FOR SDM";
                });
            }
        }
        else {
            that.client.setID(defaults.address);
            that.conf = defaults;
        }
    }
    SdM.prototype.data = function () {
        var regs = [
            {
                label: "volt",
                phase: 1,
                reg: 0
            },
            {
                label: "volt",
                phase: 2,
                reg: 2
            },
            {
                label: "volt",
                phase: 3,
                reg: 4
            },
            {
                label: "current",
                phase: 1,
                reg: 6
            },
            {
                label: "current",
                phase: 2,
                reg: 8
            },
            {
                label: "current",
                phase: 3,
                reg: 10
            },
            {
                label: "power",
                phase: 1,
                reg: 12
            },
            {
                label: "power",
                phase: 2,
                reg: 14
            },
            {
                label: "power",
                phase: 3,
                reg: 16
            },
            {
                label: "frequency",
                phase: 0,
                reg: 70
            },
            {
                label: "totalPower",
                phase: 0,
                reg: 52
            },
            {
                label: "allPower",
                phase: 0,
                reg: 74
            }
        ];
        var that = this;
        return new Promise(function (resolve, reject) {
            function start() {
                function readReg(client, reg) {
                    console.log("reg");
                    return new Promise(function (resolve, reject) {
                        client.readInputRegisters(reg, 2).then(function (data) {
                            console.log(data);
                            resolve(data.buffer.readFloatBE());
                        }).catch(function (err) {
                            console.log(err);
                            reject(err);
                        });
                    });
                }
                console.log("start");
                var answer = {};
                async.each(regss, function (iterator, cb) {
                    readReg(that.client, iterator.reg).then(function (d) {
                        answer[iterator.label + iterator.phase] = d;
                        console.log(d);
                        cb();
                    }).catch(function (err) {
                        console.log(err);
                        cb();
                    });
                }, function (err) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(answer);
                    }
                });
            }
            console.log(that.conf);
            that.client.connectRTU(that.conf.dev, { baudrate: that.conf.baud }, start);
        });
    };
    return SdM;
}());
var regss = [
    {
        label: "volt",
        phase: 1,
        reg: 0
    }
];
module.exports = SdM;

//# sourceMappingURL=data:application/json;base64,
