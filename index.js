"use strict";
var ModbusRTU = require("modbus-serial");
var merge = require("json-add");
var lsusbdev = require("lsusbdev");
var defaults = {
    baud: 9600,
    dev: "/dev/ttyUSB0",
    address: 1
};
var SdM = (function () {
    function SdM(conf) {
        var that = this;
        if (conf) {
            merge(defaults, conf);
            if (defaults.hub) {
                lsusbdev().then(function (devis) {
                    for (var i = 0; i < devis.length; i++) {
                        if (devis[i].hub === defaults.hub) {
                            defaults.dev = devis[i].dev;
                        }
                    }
                    that.conf = defaults;
                }).catch(function () {
                    throw "NO USB FOR SDM";
                });
            }
        }
        else {
            that.conf = defaults;
        }
    }
    SdM.prototype.data = function () {
        var that = this;
        var client = new ModbusRTU();
        client.setID(that.conf.address);
        console.log(defaults);
        function start() {
            console.log("start");
            client.readInputRegisters(0, 2).then(function (data) {
                console.log("regdata", data);
            }).catch(function (err) {
                console.log("regerr", err);
            });
        }
        client.connectRTU(that.conf.dev, { baudrate: that.conf.baud }, start);
    };
    return SdM;
}());
var regss = [
    {
        label: "volt",
        phase: 1,
        reg: 0
    },
    {
        label: "volt",
        phase: 2,
        reg: 2
    },
    {
        label: "volt",
        phase: 3,
        reg: 4
    },
    {
        label: "current",
        phase: 1,
        reg: 6
    },
    {
        label: "current",
        phase: 2,
        reg: 8
    },
    {
        label: "current",
        phase: 3,
        reg: 10
    },
    {
        label: "power",
        phase: 1,
        reg: 12
    },
    {
        label: "power",
        phase: 2,
        reg: 14
    },
    {
        label: "power",
        phase: 3,
        reg: 16
    },
    {
        label: "frequency",
        phase: 0,
        reg: 70
    },
    {
        label: "totalPower",
        phase: 0,
        reg: 52
    },
    {
        label: "allPower",
        phase: 0,
        reg: 74
    }
];
var regs = [
    {
        label: "volt",
        phase: 1,
        reg: 0
    }
];
module.exports = SdM;

//# sourceMappingURL=data:application/json;base64,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TUFBTTtRQUNiLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLENBQUM7S0FDVDtJQUNEO1FBQ0ksS0FBSyxFQUFFLFNBQVM7UUFDaEIsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsQ0FBQztLQUNUO0lBQ0Q7UUFDSSxLQUFLLEVBQUUsU0FBUztRQUNoQixLQUFLLEVBQUUsQ0FBQztRQUNSLEdBQUcsRUFBRSxDQUFDO0tBQ1Q7SUFDRDtRQUNJLEtBQUssRUFBRSxTQUFTO1FBQ2hCLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLEVBQUU7S0FDVjtJQUNEO1FBQ0ksS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsQ0FBQztRQUNSLEdBQUcsRUFBRSxFQUFFO0tBQ1Y7SUFDRDtRQUNJLEtBQUssRUFBRSxPQUFPO1FBQ2QsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsRUFBRTtLQUNWO0lBQ0Q7UUFDSSxLQUFLLEVBQUUsT0FBTztRQUNkLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLEVBQUU7S0FDVjtJQUNEO1FBQ0ksS0FBSyxFQUFFLFdBQVc7UUFDbEIsS0FBSyxFQUFFLENBQUM7UUFDUixHQUFHLEVBQUUsRUFBRTtLQUNWO0lBQ0Q7UUFDSSxLQUFLLEVBQUUsWUFBWTtRQUNuQixLQUFLLEVBQUUsQ0FBQztRQUNSLEdBQUcsRUFBRSxFQUFFO0tBQ1Y7SUFDRDtRQUNJLEtBQUssRUFBRSxVQUFVO1FBQ2pCLEtBQUssRUFBRSxDQUFDO1FBQ1IsR0FBRyxFQUFFLEVBQUU7S0FDVjtDQUNKLENBQUM7QUFFRixJQUFJLElBQUksR0FBRztJQUNQO1FBQ0ksS0FBSyxFQUFFLE1BQU07UUFDYixLQUFLLEVBQUUsQ0FBQztRQUNSLEdBQUcsRUFBRSxDQUFDO0tBQ1Q7Q0FDSixDQUFDO0FBS0YsaUJBQVMsR0FBRyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IE1vZGJ1c1JUVSA9IHJlcXVpcmUoXCJtb2RidXMtc2VyaWFsXCIpO1xuaW1wb3J0ICogYXMgcGF0aEV4aXN0cyBmcm9tIFwicGF0aC1leGlzdHNcIjtcbmltcG9ydCBtZXJnZSA9IHJlcXVpcmUoXCJqc29uLWFkZFwiKTtcbmltcG9ydCAqIGFzIFByb21pc2UgZnJvbSBcImJsdWViaXJkXCI7XG5pbXBvcnQgKiBhcyBhc3luYyBmcm9tIFwiYXN5bmNcIjtcblxuaW1wb3J0IGxzdXNiZGV2ID0gcmVxdWlyZShcImxzdXNiZGV2XCIpO1xuXG5cblxuaW50ZXJmYWNlIElkZWZhdWx0cyB7XG4gICAgYmF1ZD86IG51bWJlcjtcbiAgICBkZXY/OiBzdHJpbmc7XG4gICAgYWRkcmVzcz86IG51bWJlcjtcbiAgICBodWI/OiBzdHJpbmc7XG59XG5cbmxldCBkZWZhdWx0cyA9IDxJZGVmYXVsdHM+e1xuICAgIGJhdWQ6IDk2MDAsXG4gICAgZGV2OiBcIi9kZXYvdHR5VVNCMFwiLFxuICAgIGFkZHJlc3M6IDFcbn07XG5cblxuXG5cblxuXG5cblxuY2xhc3MgU2RNIHtcblxuICAgIGNvbmY6IElkZWZhdWx0cztcbiAgICBjb25zdHJ1Y3Rvcihjb25mPzogSWRlZmF1bHRzKSB7XG5cbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgICAgICBpZiAoY29uZikge1xuXG4gICAgICAgICAgICBtZXJnZShkZWZhdWx0cywgY29uZik7XG5cbiAgICAgICAgICAgIGlmIChkZWZhdWx0cy5odWIpIHtcbiAgICAgICAgICAgICAgICBsc3VzYmRldigpLnRoZW4oZnVuY3Rpb24oZGV2aXMpIHtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRldmlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGV2aXNbaV0uaHViID09PSBkZWZhdWx0cy5odWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0cy5kZXYgPSBkZXZpc1tpXS5kZXY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhhdC5jb25mID0gZGVmYXVsdHM7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiTk8gVVNCIEZPUiBTRE1cIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICB0aGF0LmNvbmYgPSBkZWZhdWx0cztcblxuXG4gICAgICAgIH1cbiAgICB9XG4gICAgZGF0YSgpIHtcblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgbGV0IGNsaWVudCA9IG5ldyBNb2RidXNSVFUoKTtcblxuICAgICAgICBjbGllbnQuc2V0SUQodGhhdC5jb25mLmFkZHJlc3MpO1xuXG5cblxuXG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRlZmF1bHRzKTtcblxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdGFydCgpIHtcblxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdGFydFwiKTtcbiAgICAgICAgICAgICAgICBjbGllbnQucmVhZElucHV0UmVnaXN0ZXJzKDAsIDIpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlZ2RhdGFcIiwgZGF0YSlcblxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlZ2VyclwiLCBlcnIpXG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG5cblxuXG5cbiAgICAgICAgICAgIGNsaWVudC5jb25uZWN0UlRVKHRoYXQuY29uZi5kZXYsIHsgYmF1ZHJhdGU6IHRoYXQuY29uZi5iYXVkIH0sIHN0YXJ0KTtcblxuXG4gICAgfVxufVxuXG5cblxuXG5cblxubGV0IHJlZ3NzID0gW1xuICAgIHtcbiAgICAgICAgbGFiZWw6IFwidm9sdFwiLFxuICAgICAgICBwaGFzZTogMSxcbiAgICAgICAgcmVnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcInZvbHRcIixcbiAgICAgICAgcGhhc2U6IDIsXG4gICAgICAgIHJlZzogMlxuICAgIH0sXG4gICAge1xuICAgICAgICBsYWJlbDogXCJ2b2x0XCIsXG4gICAgICAgIHBoYXNlOiAzLFxuICAgICAgICByZWc6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6IFwiY3VycmVudFwiLFxuICAgICAgICBwaGFzZTogMSxcbiAgICAgICAgcmVnOiA2XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcImN1cnJlbnRcIixcbiAgICAgICAgcGhhc2U6IDIsXG4gICAgICAgIHJlZzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICBsYWJlbDogXCJjdXJyZW50XCIsXG4gICAgICAgIHBoYXNlOiAzLFxuICAgICAgICByZWc6IDEwXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcInBvd2VyXCIsXG4gICAgICAgIHBoYXNlOiAxLFxuICAgICAgICByZWc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcInBvd2VyXCIsXG4gICAgICAgIHBoYXNlOiAyLFxuICAgICAgICByZWc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcInBvd2VyXCIsXG4gICAgICAgIHBoYXNlOiAzLFxuICAgICAgICByZWc6IDE2XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcImZyZXF1ZW5jeVwiLFxuICAgICAgICBwaGFzZTogMCxcbiAgICAgICAgcmVnOiA3MFxuICAgIH0sXG4gICAge1xuICAgICAgICBsYWJlbDogXCJ0b3RhbFBvd2VyXCIsXG4gICAgICAgIHBoYXNlOiAwLFxuICAgICAgICByZWc6IDUyXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGxhYmVsOiBcImFsbFBvd2VyXCIsXG4gICAgICAgIHBoYXNlOiAwLFxuICAgICAgICByZWc6IDc0XG4gICAgfVxuXTtcblxubGV0IHJlZ3MgPSBbXG4gICAge1xuICAgICAgICBsYWJlbDogXCJ2b2x0XCIsXG4gICAgICAgIHBoYXNlOiAxLFxuICAgICAgICByZWc6IDBcbiAgICB9XG5dO1xuXG5cblxuXG5leHBvcnQgPSBTZE0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
