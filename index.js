"use strict";
var ModbusRTU = require("modbus-serial");
var pathExists = require("path-exists");
var merge = require("json-add");
var Promise = require("bluebird");
var lsusbdev = require("lsusbdev");
var client = new ModbusRTU();
var defaults = {
    baud: 9600,
    dev: "/dev/ttyUSB0",
    address: 1
};
if (pathExists.sync("./conf.json")) {
    merge(defaults, require("./conf.json"));
    client.setID(defaults.address);
    if (defaults.hub) {
        lsusbdev().then(function (devis) {
            for (var i = 0; i < devis.length; i++) {
                if (devis[i].hub === defaults.hub) {
                    defaults.dev = devis[i].dev;
                }
            }
            client.connectRTU(defaults.dev, { baudrate: defaults.baud }, start);
        }).catch(function () {
            throw "NO USB FOR SDM";
        });
    }
}
else {
    client.connectRTU(defaults.dev, { baudrate: defaults.baud }, start);
}
function readReg(reg) {
    return new Promise(function (resolve, reject) {
        client.readInputRegisters(reg, 2).then(function (data) {
            resolve(data.buffer.readFloatBE());
        }).catch(function (err) {
            reject(err);
        });
    });
}
function start() {
    setTimeout(function () {
        readReg(0).then(function (voltage) {
            console.log(voltage);
        });
    }, 1000);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekMsSUFBWSxVQUFVLFdBQU0sYUFBYSxDQUFDLENBQUE7QUFDMUMsSUFBTyxLQUFLLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFDbkMsSUFBWSxPQUFPLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFFcEMsSUFBTyxRQUFRLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFHdEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQVM3QixJQUFJLFFBQVEsR0FBYztJQUN0QixJQUFJLEVBQUUsSUFBSTtJQUNWLEdBQUcsRUFBRSxjQUFjO0lBQ25CLE9BQU8sRUFBRSxDQUFDO0NBQ2IsQ0FBQztBQUVGLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWpDLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFFeEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFHL0IsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDZixRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBUyxLQUFLO1lBRTFCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNwQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNoQyxRQUFRLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQ2hDLENBQUM7WUFDTCxDQUFDO1lBQ0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDTCxNQUFNLGdCQUFnQixDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztBQUVMLENBQUM7QUFBQyxJQUFJLENBQUMsQ0FBQztJQUNKLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDeEUsQ0FBQztBQUdELGlCQUFpQixHQUFXO0lBQ3hCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFTLE9BQU8sRUFBRSxNQUFNO1FBQ3ZDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsSUFBSTtZQUNoRCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFTLEdBQUc7WUFDakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDO0FBR0Q7SUFDSSxVQUFVLENBQUM7UUFJUCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsT0FBTztZQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBR2IsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBNb2RidXNSVFUgPSByZXF1aXJlKFwibW9kYnVzLXNlcmlhbFwiKTtcbmltcG9ydCAqIGFzIHBhdGhFeGlzdHMgZnJvbSBcInBhdGgtZXhpc3RzXCI7XG5pbXBvcnQgbWVyZ2UgPSByZXF1aXJlKFwianNvbi1hZGRcIik7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuXG5pbXBvcnQgbHN1c2JkZXYgPSByZXF1aXJlKFwibHN1c2JkZXZcIik7XG5cblxubGV0IGNsaWVudCA9IG5ldyBNb2RidXNSVFUoKTtcblxuaW50ZXJmYWNlIElkZWZhdWx0cyB7XG4gICAgYmF1ZD86IG51bWJlcjtcbiAgICBkZXY/OiBzdHJpbmc7XG4gICAgYWRkcmVzcz86IG51bWJlcjtcbiAgICBodWI/OiBzdHJpbmc7XG59XG5cbmxldCBkZWZhdWx0cyA9IDxJZGVmYXVsdHM+e1xuICAgIGJhdWQ6IDk2MDAsXG4gICAgZGV2OiBcIi9kZXYvdHR5VVNCMFwiLFxuICAgIGFkZHJlc3M6IDFcbn07XG5cbmlmIChwYXRoRXhpc3RzLnN5bmMoXCIuL2NvbmYuanNvblwiKSkge1xuXG4gICAgbWVyZ2UoZGVmYXVsdHMsIHJlcXVpcmUoXCIuL2NvbmYuanNvblwiKSk7XG5cbiAgICBjbGllbnQuc2V0SUQoZGVmYXVsdHMuYWRkcmVzcyk7XG5cblxuICAgIGlmIChkZWZhdWx0cy5odWIpIHtcbiAgICAgICAgbHN1c2JkZXYoKS50aGVuKGZ1bmN0aW9uKGRldmlzKSB7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGV2aXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV2aXNbaV0uaHViID09PSBkZWZhdWx0cy5odWIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHMuZGV2ID0gZGV2aXNbaV0uZGV2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsaWVudC5jb25uZWN0UlRVKGRlZmF1bHRzLmRldiwgeyBiYXVkcmF0ZTogZGVmYXVsdHMuYmF1ZCB9LCBzdGFydCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhyb3cgXCJOTyBVU0IgRk9SIFNETVwiO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn0gZWxzZSB7XG4gICAgY2xpZW50LmNvbm5lY3RSVFUoZGVmYXVsdHMuZGV2LCB7IGJhdWRyYXRlOiBkZWZhdWx0cy5iYXVkIH0sIHN0YXJ0KTtcbn1cblxuXG5mdW5jdGlvbiByZWFkUmVnKHJlZzogbnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBjbGllbnQucmVhZElucHV0UmVnaXN0ZXJzKHJlZywgMikudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICByZXNvbHZlKGRhdGEuYnVmZmVyLnJlYWRGbG9hdEJFKCkpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxufVxuXG5cbmZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cblxuXG4gICAgICAgIHJlYWRSZWcoMCkudGhlbihmdW5jdGlvbih2b2x0YWdlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2b2x0YWdlKTtcbiAgICAgICAgfSk7XG5cbiAgICB9LCAxMDAwKTtcblxuXG59XG5cblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
